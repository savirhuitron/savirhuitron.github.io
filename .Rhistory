shiny::runApp('CAPM/ds_capm')
head(b3)
shiny::runApp('CAPM/ds_capm')
shiny::runApp('CAPM/ds_capm')
shiny::runApp('CAPM/ds_capm')
shiny::runApp('CAPM/ds_capm')
shiny::runApp('CAPM/ds_capm')
shiny::runApp('CAPM/ds_capm')
shiny::runApp('CAPM/ds_capm')
shiny::runApp('CAPM/ds_capm')
pie
shiny::runApp('CAPM/ds_capm')
shiny::runApp('CAPM/ds_capm')
pie1 <- pie
pie1
shiny::runApp('CAPM/ds_capm')
shiny::runApp('CAPM/ds_capm')
shiny::runApp('CAPM/ds_capm')
shiny::runApp('CAPM/ds_capm')
shiny::runApp('CAPM/ds_capm')
shiny::runApp('CAPM/ds_capm')
hota
carpeta <- 'O:/Users/shuitrong/Documents/CAPM'
archivo1 <- '/muestra_ipc.csv'
archivo2 <- '/hist_ipc.csv'
archivo3 <- '/emisiones.csv'
archivo4 <- '/sector_ipc.csv'
# Lee los archivos
muestra <- read.csv(paste0(carpeta, archivo1))
hist.ipc <- read.csv(paste0(carpeta, archivo2))
emisiones <- read.csv(paste0(carpeta, archivo3))
sector <- read.csv(paste0(carpeta, archivo4))
muestra <- mutate(muestra, EMISION = paste0(EMISORA, SERIE))
precios <- mutate(emisiones, FECHA = as.Date(FECHA, format = '%Y-%m-%d')) %>%
cast(FECHA ~ EMISION, value = 'PA')
ipc <- dplyr::mutate(hist.ipc, FECHA = as.Date(FECHA, format = '%d/%m/%Y')) %>%
dplyr::select(c(-INDICE)) %>%
dplyr::rename(IPC = NIVEL)
nombres <- names(precios)
muestra1 <- as.vector(muestra$EMISION)
# valida cuales de las emisiones del IPC se encuentran  en los precios ajustados
# las guardamos en un vector para filtrarlos por la posicion en la cual se quedan
emis <- which (nombres %in% muestra1 == TRUE)
t4 <- dplyr::select(precios, FECHA)
for (i in emis){
t1 <- dplyr::select(precios, i)
t4 <- cbind(t4, t1)
}
t4 <- dplyr::select(t4, -c(NEMAKA))
t6 <- merge(t4, ipc, by = "FECHA" )
######
# realiza los rendimientos
t5 <- sapply(t6[,2:length(t6)], Delt)
# Elimina la primer fila de los rendimientos.
t5 <- t5[-1, ]
rend <- as.data.frame(t5)
# adjuntamos en esta base el indice
# Realizamos el data frame que contenga las betas
b <- data.frame()
for (i in 1:length(rend)){
a <- dplyr::select(rend, i, IPC)
beta <- lm(a[,1] ~ IPC, data = a)
b1 <- beta$coefficients[2]
b <- rbind(b,b1)
}
colnames(b) <- "BETA"
rf <- 3.5/100
rm <- 8.29/100
b1 <-  dplyr::mutate(b, EMISION = names(rend)) %>%
dplyr::select(EMISION,BETA) %>%
dplyr::mutate(RF = rf, RM = rm, CAPM = (RF + BETA *(RM - RF)* 100),
EMISORA = 1:length(rend))
# Las podemos dividir en quartiles / primero realizamos un vector el cual contenga
# el numero de emisoras
niveles <- 1:nrow(b1)
# idenificamos los cuartiles   Alta, baja, media y minima
q <- quantile(b1$BETA)
minima  <-   which(b1$BETA <= quantile(b1$BETA)[2])
baja   <-   which(b1$BETA > quantile(b1$BETA)[2] &  b1$BETA <= quantile(b1$BETA)[3])
media    <-   which(b1$BETA > quantile(b1$BETA)[3] &  b1$BETA <= quantile(b1$BETA)[4])
alta    <-   which(b1$BETA > quantile(b1$BETA)[4])
# realizamos la comprobaci?n de las emisoras
length(alta) + length(media) + length(minima) + length(baja)
niveles[minima] <- "MINIMUM"
niveles[baja] <- "LOW"
niveles[media] <- "MEDIA"
niveles[alta] <- "HIGH"
b2 <- dplyr::mutate(b1, NIVELES = niveles, BETA = round(BETA, 6), CAPM = round(CAPM, 6))
# Desde aqui realizamos visualizaciones
# El tama?o de la burbuja que sea el rendimiento
#ta <- c("HIGH", "MEDIA", "LOW", "MINIMUM")
#b6 <- b2[b2$NIVELES %in% ta, ]
#l <- hPlot(EMISORA ~ BETA , data = b6, type = "bubble", size = "CAPM", group = "NIVELES",
#      title = "BETAS DE LAS EMISIONES DEL IPC")
#l$chart(zoomType = "xy")
#l
#l$plotOptions(enabled = T, format = (b2$EMISION))
# Data Table para que se vea la informacion correspondiente
b3 <- dplyr::select(b2, -c(EMISORA))
# Integramos los sectores para saber quienes son
b4 <- merge(b3, sector, by.x =  "EMISION") %>%
select(EMISION, RF, RM, BETA, CAPM, NIVELES, SECTOR, NIVELES)
b4 <- datatable(b4,rownames = F)
b7 <- b3 %>%
mutate(RF1 = (3.5/100), RM1 = (8.29/100), CAPM1 = (RF1 + BETA*(RM1 - RF1)*100))
# Pie que nos dice las emisoras del IPC que pertenecen a los distintos SECTORES
## Example 4
#x <- data.frame(key = c("a", "b", "c"), value = c(1, 2, 3))
hota <- as.data.frame(table(sector$SECTOR_EN))
ja <- as.vector(hota[6,1])
hota <- dplyr::filter(hota, Var1 != hota[6,1])
#pie3 <- hPlot(x = "Var1", y = "Freq", data = hota, type = "pie", title = "Distribution by Sector ")
#pie
#pie1 <- pie
# Cuanto es el Valor de Mercado de las empresas del IPC vs el PIB
# histograma del Market Cap de las empresas del IPC
hist <- group_by(sector, SECTOR_EN) %>%
summarise(MKT_CAP = sum(VMKT_USD)/1000000) %>%
arrange(desc(MKT_CAP))
#h2 <- Highcharts$new()
#h2$series(data = hist$MKT_CAP, type = "bar")
#h2$xAxis(categories = hist$SECTOR_EN)
#h2$title(text = "Market Cap by Sector (000,000) USD")
#h2
shiny::runApp('CAPM/ds_capm')
library(PerformanceAnalytics, warn = F)
library(dplyr, warn = F)
library(ggplot2, warn = F)
library(tidyr, warn = F)
library(reshape, warn = F)
library(quantmod, warn = F)
library(lubridate, warn =F)
library(rCharts)
library(DT, warn = F)
# c?digo en donde s?lo se realiza las Betas con el modelo lineal
#carpeta <- 'C:/Users/Savir/Documents/CAPM'
carpeta <- 'O:/Users/shuitrong/Documents/CAPM'
archivo1 <- '/muestra_ipc.csv'
archivo2 <- '/hist_ipc.csv'
archivo3 <- '/emisiones.csv'
archivo4 <- '/sector_ipc.csv'
# Lee los archivos
muestra <- read.csv(paste0(carpeta, archivo1))
hist.ipc <- read.csv(paste0(carpeta, archivo2))
emisiones <- read.csv(paste0(carpeta, archivo3))
sector <- read.csv(paste0(carpeta, archivo4))
muestra <- mutate(muestra, EMISION = paste0(EMISORA, SERIE))
precios <- mutate(emisiones, FECHA = as.Date(FECHA, format = '%Y-%m-%d')) %>%
cast(FECHA ~ EMISION, value = 'PA')
ipc <- dplyr::mutate(hist.ipc, FECHA = as.Date(FECHA, format = '%d/%m/%Y')) %>%
dplyr::select(c(-INDICE)) %>%
dplyr::rename(IPC = NIVEL)
nombres <- names(precios)
muestra1 <- as.vector(muestra$EMISION)
# valida cuales de las emisiones del IPC se encuentran  en los precios ajustados
# las guardamos en un vector para filtrarlos por la posicion en la cual se quedan
emis <- which (nombres %in% muestra1 == TRUE)
t4 <- dplyr::select(precios, FECHA)
for (i in emis){
t1 <- dplyr::select(precios, i)
t4 <- cbind(t4, t1)
}
t4 <- dplyr::select(t4, -c(NEMAKA))
t6 <- merge(t4, ipc, by = "FECHA" )
######
# realiza los rendimientos
t5 <- sapply(t6[,2:length(t6)], Delt)
# Elimina la primer fila de los rendimientos.
t5 <- t5[-1, ]
rend <- as.data.frame(t5)
# adjuntamos en esta base el indice
# Realizamos el data frame que contenga las betas
b <- data.frame()
for (i in 1:length(rend)){
a <- dplyr::select(rend, i, IPC)
beta <- lm(a[,1] ~ IPC, data = a)
b1 <- beta$coefficients[2]
b <- rbind(b,b1)
}
colnames(b) <- "BETA"
rf <- 3.5/100
rm <- 8.29/100
b1 <-  dplyr::mutate(b, EMISION = names(rend)) %>%
dplyr::select(EMISION,BETA) %>%
dplyr::mutate(RF = rf, RM = rm, CAPM = (RF + BETA *(RM - RF)* 100),
EMISORA = 1:length(rend))
# Las podemos dividir en quartiles / primero realizamos un vector el cual contenga
# el numero de emisoras
niveles <- 1:nrow(b1)
# idenificamos los cuartiles   Alta, baja, media y minima
q <- quantile(b1$BETA)
minima  <-   which(b1$BETA <= quantile(b1$BETA)[2])
baja   <-   which(b1$BETA > quantile(b1$BETA)[2] &  b1$BETA <= quantile(b1$BETA)[3])
media    <-   which(b1$BETA > quantile(b1$BETA)[3] &  b1$BETA <= quantile(b1$BETA)[4])
alta    <-   which(b1$BETA > quantile(b1$BETA)[4])
# realizamos la comprobaci?n de las emisoras
length(alta) + length(media) + length(minima) + length(baja)
niveles[minima] <- "MINIMUM"
niveles[baja] <- "LOW"
niveles[media] <- "MEDIA"
niveles[alta] <- "HIGH"
b2 <- dplyr::mutate(b1, NIVELES = niveles, BETA = round(BETA, 6), CAPM = round(CAPM, 6))
# Desde aqui realizamos visualizaciones
# El tama?o de la burbuja que sea el rendimiento
#ta <- c("HIGH", "MEDIA", "LOW", "MINIMUM")
#b6 <- b2[b2$NIVELES %in% ta, ]
#l <- hPlot(EMISORA ~ BETA , data = b6, type = "bubble", size = "CAPM", group = "NIVELES",
#      title = "BETAS DE LAS EMISIONES DEL IPC")
#l$chart(zoomType = "xy")
#l
#l$plotOptions(enabled = T, format = (b2$EMISION))
# Data Table para que se vea la informacion correspondiente
b3 <- dplyr::select(b2, -c(EMISORA))
# Integramos los sectores para saber quienes son
b4 <- merge(b3, sector, by.x =  "EMISION") %>%
select(EMISION, RF, RM, BETA, CAPM, NIVELES, SECTOR, NIVELES)
b4 <- datatable(b4,rownames = F)
b7 <- b3 %>%
mutate(RF1 = (3.5/100), RM1 = (8.29/100), CAPM1 = (RF1 + BETA*(RM1 - RF1)*100))
# Pie que nos dice las emisoras del IPC que pertenecen a los distintos SECTORES
## Example 4
#x <- data.frame(key = c("a", "b", "c"), value = c(1, 2, 3))
hota <- as.data.frame(table(sector$SECTOR_EN))
ja <- as.vector(hota[6,1])
hota <- dplyr::filter(hota, Var1 != hota[6,1])
#pie3 <- hPlot(x = "Var1", y = "Freq", data = hota, type = "pie", title = "Distribution by Sector ")
#pie
#pie1 <- pie
# Cuanto es el Valor de Mercado de las empresas del IPC vs el PIB
# histograma del Market Cap de las empresas del IPC
hist <- group_by(sector, SECTOR_EN) %>%
summarise(MKT_CAP = sum(VMKT_USD)/1000000) %>%
arrange(desc(MKT_CAP))
#h2 <- Highcharts$new()
#h2$series(data = hist$MKT_CAP, type = "bar")
#h2$xAxis(categories = hist$SECTOR_EN)
#h2$title(text = "Market Cap by Sector (000,000) USD")
#h2
shiny::runApp('CAPM/ds_capm')
shiny::runApp('CAPM/ds_capm')
shiny::runApp('CAPM/ds_capm')
install.packages("rsconnect")
install.packages("rsconnect")
rsconnect::setAccountInfo(name='savirhuitron',
token='2EFBD76EB9773D4C4B7E8D97DB246F90',
secret='/ZszKVgbrDP5qN7rJ3UjM1rx1vhJmFbatb3v9Tgv')
library(rsconnect)
library(rsconnect, warn = F)
rsconnect::deployApp('O:/Users/shuitrong/Documents/CAPM/ds_capm/app')
rsconnect::deployApp('O:/Users/shuitrong/Documents/CAPM/ds_capm')
library(dplyr, warn = F)
shiny::runApp('CAPM/ds_capm')
shiny::runApp('CAPM/ds_capm')
rsconnect::deployApp('O:/Users/shuitrong/Documents/CAPM/ds_capm')
shiny::runApp('CAPM/ds_capm')
shiny::runApp('CAPM/ds_capm')
shiny::runApp('CAPM/ds_capm')
rsconnect::deployApp('O:/Users/shuitrong/Documents/CAPM/ds_capm')
rsconnect::deployApp('O:/Users/shuitrong/Documents/CAPM/ds_capm')
rsconnect::deployApp('O:/Users/shuitrong/Documents/CAPM/ds_capm')
library(PerformanceAnalytics, warn = F)
library(dplyr, warn = F)
library(ggplot2, warn = F)
library(tidyr, warn = F)
library(reshape, warn = F)
library(quantmod, warn = F)
library(lubridate, warn =F)
library(rCharts)
library(DT, warn = F)
# c?digo en donde s?lo se realiza las Betas con el modelo lineal
#carpeta <- 'C:/Users/Savir/Documents/CAPM'
carpeta <- 'O:/Users/shuitrong/Documents/CAPM'
archivo1 <- '/muestra_ipc.csv'
archivo2 <- '/hist_ipc.csv'
archivo3 <- '/emisiones.csv'
archivo4 <- '/sector_ipc.csv'
# Lee los archivos
muestra <- read.csv(paste0(carpeta, archivo1))
hist.ipc <- read.csv(paste0(carpeta, archivo2))
emisiones <- read.csv(paste0(carpeta, archivo3))
sector <- read.csv(paste0(carpeta, archivo4))
muestra <- mutate(muestra, EMISION = paste0(EMISORA, SERIE))
precios <- mutate(emisiones, FECHA = as.Date(FECHA, format = '%Y-%m-%d')) %>%
cast(FECHA ~ EMISION, value = 'PA')
ipc <- dplyr::mutate(hist.ipc, FECHA = as.Date(FECHA, format = '%d/%m/%Y')) %>%
dplyr::select(c(-INDICE)) %>%
dplyr::rename(IPC = NIVEL)
nombres <- names(precios)
muestra1 <- as.vector(muestra$EMISION)
# valida cuales de las emisiones del IPC se encuentran  en los precios ajustados
# las guardamos en un vector para filtrarlos por la posicion en la cual se quedan
emis <- which (nombres %in% muestra1 == TRUE)
t4 <- dplyr::select(precios, FECHA)
for (i in emis){
t1 <- dplyr::select(precios, i)
t4 <- cbind(t4, t1)
}
t4 <- dplyr::select(t4, -c(NEMAKA))
t6 <- merge(t4, ipc, by = "FECHA" )
######
# realiza los rendimientos
t5 <- sapply(t6[,2:length(t6)], Delt)
# Elimina la primer fila de los rendimientos.
t5 <- t5[-1, ]
rend <- as.data.frame(t5)
# adjuntamos en esta base el indice
# Realizamos el data frame que contenga las betas
b <- data.frame()
for (i in 1:length(rend)){
a <- dplyr::select(rend, i, IPC)
beta <- lm(a[,1] ~ IPC, data = a)
b1 <- beta$coefficients[2]
b <- rbind(b,b1)
}
colnames(b) <- "BETA"
rf <- 3.5/100
rm <- 8.29/100
b1 <-  dplyr::mutate(b, EMISION = names(rend)) %>%
dplyr::select(EMISION,BETA) %>%
dplyr::mutate(RF = rf, RM = rm, CAPM = (RF + BETA *(RM - RF)* 100),
EMISORA = 1:length(rend))
# Las podemos dividir en quartiles / primero realizamos un vector el cual contenga
# el numero de emisoras
niveles <- 1:nrow(b1)
# idenificamos los cuartiles   Alta, baja, media y minima
q <- quantile(b1$BETA)
minima  <-   which(b1$BETA <= quantile(b1$BETA)[2])
baja   <-   which(b1$BETA > quantile(b1$BETA)[2] &  b1$BETA <= quantile(b1$BETA)[3])
media    <-   which(b1$BETA > quantile(b1$BETA)[3] &  b1$BETA <= quantile(b1$BETA)[4])
alta    <-   which(b1$BETA > quantile(b1$BETA)[4])
# realizamos la comprobaci?n de las emisoras
length(alta) + length(media) + length(minima) + length(baja)
niveles[minima] <- "MINIMUM"
niveles[baja] <- "LOW"
niveles[media] <- "MEDIA"
niveles[alta] <- "HIGH"
b2 <- dplyr::mutate(b1, NIVELES = niveles, BETA = round(BETA, 6), CAPM = round(CAPM, 6))
# Desde aqui realizamos visualizaciones
# Data Table para que se vea la informacion correspondiente
b3 <- dplyr::select(b2, -c(EMISORA))
# Integramos los sectores para saber quienes son
b4 <- merge(b3, sector, by.x =  "EMISION") %>%
select(EMISION, RF, RM, BETA, CAPM, NIVELES, SECTOR, NIVELES)
b4 <- datatable(b4,rownames = F)
b7 <- b3 %>%
mutate(RF1 = (3.5/100), RM1 = (8.29/100), CAPM1 = (RF1 + BETA*(RM1 - RF1)*100))
# Pie que nos dice las emisoras del IPC que pertenecen a los distintos SECTORES
hota <- as.data.frame(table(sector$SECTOR_EN))
ja <- as.vector(hota[6,1])
hota <- dplyr::filter(hota, Var1 != hota[6,1])
hist <- group_by(sector, SECTOR_EN) %>%
summarise(MKT_CAP = sum(VMKT_USD)/1000000) %>%
arrange(desc(MKT_CAP))
shiny::runApp('CAPM/ds_capm')
shiny::runApp('CAPM/ds_capm')
rsconnect::deployApp('O:/Users/shuitrong/Documents/CAPM/ds_capm')
library(markdown, warn = F)
library(mathjax)
install.packages("withMathJax")
library(withMathJax)
install.packages("withMathJax")
shiny::runApp('CAPM/ds_capm')
shiny::runApp('CAPM/ds_capm')
shiny::runApp('CAPM/ds_capm')
shiny::runApp('CAPM/ds_capm')
shiny::runApp('CAPM/ds_capm')
shiny::runApp('CAPM/ds_capm')
shiny::runApp('CAPM/ds_capm')
rsconnect::deployApp('O:/Users/shuitrong/Documents/CAPM/ds_capm')
shiny::runApp('CAPM/ds_capm')
shiny::runApp('CAPM/ds_capm')
shiny::runApp('CAPM/ds_capm')
shiny::runApp('CAPM/ds_capm')
rsconnect::deployApp('O:/Users/shuitrong/Documents/CAPM/ds_capm')
shiny::runApp('CAPM/ds_capm')
shiny::runApp('CAPM/ds_capm')
shiny::runApp('CAPM/ds_capm')
rsconnect::deployApp('O:/Users/shuitrong/Documents/CAPM/ds_capm')
shiny::runApp('CAPM/ds_capm')
shiny::runApp('CAPM/ds_capm')
shiny::runApp('CAPM/ds_capm')
shiny::runApp('CAPM/ds_capm')
shiny::runApp('CAPM/ds_capm')
shiny::runApp('CAPM/ds_capm')
rsconnect::deployApp('O:/Users/shuitrong/Documents/CAPM/ds_capm')
library(slidify)
author("capm_sl")
browseURL("index.html")
library(XML)
url <- file.path(carpeta, 'ifrsxbrl_659141_2015-04_1.xml')
carpeta <- "O:/Users/shuitrong/Documents/FEMSA"
url <- file.path(carpeta, 'ifrsxbrl_659141_2015-04_1.xml')
doc <- xmlTreeParse(url, useInternal = T)
doc
str(doc)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
nameS(rootNode)
names(rootNode)
nombres <- names(rootNode)
write.csv(nombres, "femsa.csv", row.names = F)
getwd()
rootNode[[1]]
rootNode[[2]]
rootNode[[3]]
length(rootNode)
dim(rootNode)
length(doc)
dim(doc)
dim(nombres)
length(nombres)
rootNode[[6784]]
rootNode[[6783]]
rootNode[[6782]]
rootNode[[6782]][[1]]
rootNode[[6782]][[2]]
rootNode[[6781]][[2]]
rootNode[[6781]][[1]]
rootNode[[6781]]
rootNode[[3978]][[1]]
rootNode[[3978]]
rootNode[[3978]][[2]]
rootNode[[3978]][[0]]
rootNode[[3978]][[1]]
rootNode[[4024]]
rootNode[[4024]][[1]]
rootNode[[6781]][[1]]
rootNode[[6782]][[1]]
rootNode[[6783]][[1]]
rootNode[[6784]][[1]]
grep("MXN", rootNode)
grep(MXN, rootNode)
MXN
grep("MXN", rootNode, value = T)
rootNode[[1]][[1]]
rootNode[[3]][[1]]
rootNode[[3]]
rootNode[[4]]
length(rootNode[[4]])
dim(rootNode[[4]])
rootNode[[5]]
rootNode[[6]]
rootNode[[7]]
rootNode[[8]]
rootNode[[9]]
rootNode[[4022]][[1]]
rootNode[[4021]][[1]]
rootNode[[4020]][[1]]
rootNode[[4019]][[1]]
rootNode[[4018]][[1]]
rootNode[[3]]
rootNode[[3]][[1]]
rootNode[[3]][[2]]
rootNode[[5061]][[1]]
rootNode[[5061]][[2]]
rootNode[[5062]][[1]]
rootNode[[5060]][[1]]
rootNode[[5049]][[1]]
rootNode[[5050]][[1]]
rootNode[[5051]][[]]
rootNode[[5051]][[1]]
rootNode[[5052]][[1]]
rootNode[[5053]][[1]]
rootNode[[5054]][[1]]
rootNode[[5055]][[1]]
rootNode[[5056]][[1]]
rootNode[[5057]][[1]]
rootNode[[5058]][[1]]
rootNode[[5059]][[1]]
rootNode[[5060]][[1]]
rootNode[[5059]][[1]] # este es el bueno
rootNode[[6284]][[1]]
rootNode[[6290]][[1]]
rootNode[[6497]][[1]]
rootNode[[6284]][[1]]
rootNode[[6290]][[1]]
rootNode[[6393]][[1]]
browseURL("index.html")
browseURL("index.html")
getwd()
head(b2)
write.csv(b2, "capm_beta.csv")
getwd()
browseURL("index.html")
publish(title = 'CAPM', 'index.html', host = 'rpubs')
publish(title = 'CAPM', 'index.html', host = 'http://rpubs.com/savirhuitron')
library(slidifyLibraries)
publish(title = 'CAPM', 'index.html', host = 'http://rpubs.com/savirhuitron')
slidify('index.Rmd', options = list(embed = TRUE))
rPubsUpload('CAPM', 'index.html')
library(slidifyLibraries)
library(slidify)
slidify('index.Rmd', options = list(embed = TRUE))
publish_rpubs('CAPM', 'index.html')
publish_rpubs('CAPM', 'index.html')
rPubsUpload('CAPM', 'index.html')
publish(title = 'CAPM', 'index.html', host = 'rpubs')
getwd()
publish(title = 'CAPM', 'index.html', host = 'rpubs')
require(RCurl)
publish(title = 'CAPM', 'index.html', host = 'rpubs')
getwd()
dir()
test <- read.csv("test_spread.csv")
head(test)
tail(test)
dir()
rm(test)
shiny::runApp('~/CAPM/ds_capm')
find.package("RCurl")
.libPaths( "")
.libPaths("")
